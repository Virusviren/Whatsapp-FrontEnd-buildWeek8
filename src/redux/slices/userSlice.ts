import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { AxiosResponse } from "axios"
import backend from "../../backend/backend"
import { IUser, IUserStore } from "../../typings/users"
import { RootState } from "../app/store"

const initialState: IUserStore = {
  data: {
    _id: "",
    name: "",
    surname: "",
    email: "",
    groups: [],
    avatar: "",
    bio: "",
    status: "",
  },
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUserData = createAsyncThunk("user/fetchUserData", async () => {
  const { data }: AxiosResponse<IUser> = await backend.get("/users/me")
  // The value we return becomes the `fulfilled` action payload
  return data
})

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder.addCase(fetchUserData.fulfilled, (state, action) => {
      state.data = action.payload
    })
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user

export default userSlice.reducer
